import pygame
import psycopg2
import time
import random


def get_connection():
    return psycopg2.connect(
        dbname="snake_db",  
        user="postgres",  
        password="27112005a",  
        host="localhost",
        port="5432"
    )

def create_tables():
    conn = get_connection()
    cur = conn.cursor()
    cur.execute("""
        CREATE TABLE IF NOT EXISTS users (
            id SERIAL PRIMARY KEY,
            username VARCHAR(50) UNIQUE NOT NULL
        );
    """)
    cur.execute("""
        CREATE TABLE IF NOT EXISTS user_score (
            id SERIAL PRIMARY KEY,
            user_id INTEGER REFERENCES users(id),
            score INTEGER NOT NULL,
            level INTEGER NOT NULL,
            saved_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
        );
    """)
    conn.commit()
    cur.close()
    conn.close()


def get_or_create_user(username):
    conn = get_connection()
    cur = conn.cursor()
    cur.execute("SELECT id FROM users WHERE username = %s", (username,))
    user = cur.fetchone()

    if user:
        user_id = user[0]
    else:
        cur.execute("INSERT INTO users (username) VALUES (%s) RETURNING id", (username,))
        user_id = cur.fetchone()[0]
        conn.commit()

    cur.execute("""
        SELECT level FROM user_score
        WHERE user_id = %s
        ORDER BY saved_at DESC LIMIT 1
    """, (user_id,))
    result = cur.fetchone()
    level = result[0] if result else 1

    cur.close()
    conn.close()
    return user_id, level


def save_game_state(user_id, score, level):
    conn = get_connection()
    cur = conn.cursor()
    cur.execute("INSERT INTO user_score (user_id, score, level) VALUES (%s, %s, %s)",
                (user_id, score, level))
    conn.commit()
    cur.close()
    conn.close()


def snake_game(user_id, start_level):
    pygame.init()
    screen = pygame.display.set_mode((600, 400))
    pygame.display.set_caption(" Snakee ")

    clock = pygame.time.Clock()
    snake_speed = 10 + start_level * 2
    snake_pos = [100, 50]
    snake_body = [[100, 50]]
    direction = 'RIGHT'
    change_to = direction
    score = 0
    running = True
    paused = False

    
    fruit_pos = [random.randrange(1, 60) * 10, random.randrange(1, 40) * 10]
    fruit_spawn = True

    font = pygame.font.SysFont(None, 30)

    def draw_text(text, x, y):
        txt = font.render(text, True, (255, 255, 255))
        screen.blit(txt, (x, y))

    while running:
        for event in pygame.event.get():
            if event.type == pygame.QUIT:
                save_game_state(user_id, score, start_level)
                running = False
            elif event.type == pygame.KEYDOWN:
                if event.key == pygame.K_p:
                    paused = not paused
                    if paused:
                        save_game_state(user_id, score, start_level)
                        print("Game paused")
                    else:
                        print(" resume")
                elif event.key == pygame.K_UP and direction != 'DOWN':
                    change_to = 'UP'
                elif event.key == pygame.K_DOWN and direction != 'UP':
                    change_to = 'DOWN'
                elif event.key == pygame.K_LEFT and direction != 'RIGHT':
                    change_to = 'LEFT'
                elif event.key == pygame.K_RIGHT and direction != 'LEFT':
                    change_to = 'RIGHT'

        if paused:
            continue

        direction = change_to
        if direction == 'UP':
            snake_pos[1] -= 10
        if direction == 'DOWN':
            snake_pos[1] += 10
        if direction == 'LEFT':
            snake_pos[0] -= 10
        if direction == 'RIGHT':
            snake_pos[0] += 10

        
        if snake_pos[0] < 0 or snake_pos[0] >= 600 or snake_pos[1] < 0 or snake_pos[1] >= 400:
            save_game_state(user_id, score, start_level)
            print(" Game Over")
            break

        
        if snake_pos in snake_body[1:]:
            save_game_state(user_id, score, start_level)
            print("Game Over")
            break

        snake_body.insert(0, list(snake_pos))

        if snake_pos == fruit_pos:
            score += 1
            fruit_spawn = False
        else:
            snake_body.pop()

        if not fruit_spawn:
            fruit_pos = [random.randrange(1, 60) * 10, random.randrange(1, 40) * 10]
        fruit_spawn = True

        
        screen.fill((0, 0, 0))
        for pos in snake_body:
            pygame.draw.rect(screen, (0, 255, 200), pygame.Rect(pos[0], pos[1], 10, 10))

        pygame.draw.rect(screen, (255, 130, 0), pygame.Rect(fruit_pos[0], fruit_pos[1], 10, 10)) 

        draw_text(f"Score: {score}", 10, 10)
        draw_text(f"Level: {start_level}", 500, 10)
        pygame.display.flip()

        clock.tick(snake_speed)

    pygame.quit()


if __name__ == "__main__":
    create_tables()
    username = input("Your name?: ")
    user_id, current_level = get_or_create_user(username)
    print(f" Hello {username} Current level: {current_level}")
    snake_game(user_id, current_level)